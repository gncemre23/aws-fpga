#-----------------------------------------------------------
# Vivado v2020.2 (64-bit)
# SW Build 3064766 on Wed Nov 18 09:12:47 MST 2020
# IP Build 3064653 on Wed Nov 18 14:17:31 MST 2020
# Start of session at: Mon Jul  5 12:09:04 2021
# Process ID: 83858
# Current directory: /home/egoncu/Desktop/github/aws-fpga/hdk/cl/developer_designs/oBTC_miner/build/scripts
# Command line: vivado -mode batch -nojournal -log 21_07_05-120902.vivado.log -source create_dcp_from_cl.tcl -tclargs 21_07_05-120902 TIMING 1.4.19 0x04261818 0xF000 0x1D0F 0x1D51 0xFEDD A0 B5 C0 2 0
# Log file: /home/egoncu/Desktop/github/aws-fpga/hdk/cl/developer_designs/oBTC_miner/build/scripts/21_07_05-120902.vivado.log
# Journal file: 
#-----------------------------------------------------------
source create_dcp_from_cl.tcl
# package require tar
# set TOP top_sp
# set CL_MODULE cl_hello_world
# set timestamp           [lindex $argv  0]
# set strategy            [lindex $argv  1]
# set hdk_version         [lindex $argv  2]
# set shell_version       [lindex $argv  3]
# set device_id           [lindex $argv  4]
# set vendor_id           [lindex $argv  5]
# set subsystem_id        [lindex $argv  6]
# set subsystem_vendor_id [lindex $argv  7]
# set clock_recipe_a      [lindex $argv  8]
# set clock_recipe_b      [lindex $argv  9]
# set clock_recipe_c      [lindex $argv 10]
# set uram_option         [lindex $argv 11]
# set notify_via_sns      [lindex $argv 12]
# set VDEFINES            [lindex $argv 13]
# set cl.synth   1
# set implement  1
# puts "AWS FPGA Scripts";
AWS FPGA Scripts
# puts "Creating Design Checkpoint from Custom Logic source code";
Creating Design Checkpoint from Custom Logic source code
# puts "HDK Version:            $hdk_version";
HDK Version:            1.4.19
# puts "Shell Version:          $shell_version";
Shell Version:          0x04261818
# puts "Vivado Script Name:     $argv0";
Vivado Script Name:     create_dcp_from_cl.tcl
# puts "Strategy:               $strategy";
Strategy:               TIMING
# puts "PCI Device ID           $device_id";
PCI Device ID           0xF000
# puts "PCI Vendor ID           $vendor_id";
PCI Vendor ID           0x1D0F
# puts "PCI Subsystem ID        $subsystem_id";
PCI Subsystem ID        0x1D51
# puts "PCI Subsystem Vendor ID $subsystem_vendor_id";
PCI Subsystem Vendor ID 0xFEDD
# puts "Clock Recipe A:         $clock_recipe_a";
Clock Recipe A:         A0
# puts "Clock Recipe B:         $clock_recipe_b";
Clock Recipe B:         B5
# puts "Clock Recipe C:         $clock_recipe_c";
Clock Recipe C:         C0
# puts "URAM option:            $uram_option";
URAM option:            2
# puts "Notify when done:       $notify_via_sns";
Notify when done:       0
# if { [info exists ::env(CL_DIR)] } {
#         set CL_DIR $::env(CL_DIR)
#         puts "Using CL directory $CL_DIR";
# } else {
#         puts "Error: CL_DIR environment variable not defined ! ";
#         puts "Use export CL_DIR=Your_Design_Root_Directory"
#         exit 2
# }
Using CL directory /home/egoncu/Desktop/github/aws-fpga/hdk/cl/developer_designs/oBTC_miner
# if { [info exists ::env(HDK_SHELL_DIR)] } {
#         set HDK_SHELL_DIR $::env(HDK_SHELL_DIR)
#         puts "Using Shell directory $HDK_SHELL_DIR";
# } else {
#         puts "Error: HDK_SHELL_DIR environment variable not defined ! ";
#         puts "Run the hdk_setup.sh script from the root directory of aws-fpga";
#         exit 2
# }
Using Shell directory /home/egoncu/Desktop/github/aws-fpga/hdk/common/shell_v04261818
# if { [info exists ::env(HDK_SHELL_DESIGN_DIR)] } {
#         set HDK_SHELL_DESIGN_DIR $::env(HDK_SHELL_DESIGN_DIR)
#         puts "Using Shell design directory $HDK_SHELL_DESIGN_DIR";
# } else {
#         puts "Error: HDK_SHELL_DESIGN_DIR environment variable not defined ! ";
#         puts "Run the hdk_setup.sh script from the root directory of aws-fpga";
#         exit 2
# }
Using Shell design directory /home/egoncu/Desktop/github/aws-fpga/hdk/common/shell_v04261818/design
# set implDir   $CL_DIR/build/checkpoints
# set rptDir    $CL_DIR/build/reports
# set cacheDir  $HDK_SHELL_DESIGN_DIR/cache/ddr4_phy
# puts "All reports and intermediate results will be time stamped with $timestamp";
All reports and intermediate results will be time stamped with 21_07_05-120902
# set_msg_config -id {Chipscope 16-3} -suppress
# set_msg_config -string {AXI_QUAD_SPI} -suppress
# set_msg_config -id {Common 17-55}        -suppress
# set_msg_config -id {Vivado 12-4739}      -suppress
# set_msg_config -id {Constraints 18-4866} -suppress
# set_msg_config -id {IP_Flow 19-2162}     -suppress
# set_msg_config -id {Route 35-328}        -suppress
# set_msg_config -id {Vivado 12-1008}      -suppress
# set_msg_config -id {Vivado 12-508}       -suppress
# set_msg_config -id {filemgmt 56-12}      -suppress
# set_msg_config -id {DRC CKLD-1}          -suppress
# set_msg_config -id {DRC CKLD-2}          -suppress
# set_msg_config -id {IP_Flow 19-2248}     -suppress
# set_msg_config -id {Vivado 12-1580}      -suppress
# set_msg_config -id {Constraints 18-550}  -suppress
# set_msg_config -id {Synth 8-3295}        -suppress
# set_msg_config -id {Synth 8-3321}        -suppress
# set_msg_config -id {Synth 8-3331}        -suppress
# set_msg_config -id {Synth 8-3332}        -suppress
# set_msg_config -id {Synth 8-6014}        -suppress
# set_msg_config -id {Timing 38-436}       -suppress
# set_msg_config -id {DRC REQP-1853}       -suppress
# set_msg_config -id {Synth 8-350}         -suppress
# set_msg_config -id {Synth 8-3848}        -suppress
# set_msg_config -id {Synth 8-3917}        -suppress
# set_msg_config -id {Opt 31-430}          -suppress
# set_msg_config -severity "CRITICAL WARNING" -string "WRAPPER_INST/SH" -suppress
# set_msg_config -severity "WARNING"          -string "WRAPPER_INST/SH" -suppress
# puts "AWS FPGA: ([clock format [clock seconds] -format %T]) Calling the encrypt.tcl.";
AWS FPGA: (12:09:11) Calling the encrypt.tcl.
# if {[string compare $notify_via_sns "1"] == 0} {
#   if {![info exists env(EMAIL)]} {
#     puts "AWS FPGA: ([clock format [clock seconds] -format %T]) EMAIL variable empty!  Completition notification will *not* be sent!";
#     set notify_via_sns 0;
#   } else {
#     puts "AWS FPGA: ([clock format [clock seconds] -format %T]) EMAIL address for completion notification set to $env(EMAIL).";
#   }
# }
# switch $strategy {
#     "BASIC" {
#         puts "BASIC strategy."
#         source $HDK_SHELL_DIR/build/scripts/strategy_BASIC.tcl
#     }
#     "EXPLORE" {
#         puts "EXPLORE strategy."
#         source $HDK_SHELL_DIR/build/scripts/strategy_EXPLORE.tcl
#     }
#     "TIMING" {
#         puts "TIMING strategy."
#         source $HDK_SHELL_DIR/build/scripts/strategy_TIMING.tcl
#     }
#     "CONGESTION" {
#         puts "CONGESTION strategy."
#         source $HDK_SHELL_DIR/build/scripts/strategy_CONGESTION.tcl
#     }
#     "DEFAULT" {
#         puts "DEFAULT strategy."
#         source $HDK_SHELL_DIR/build/scripts/strategy_DEFAULT.tcl
#     }
#     default {
#         puts "$strategy is NOT a valid strategy. Defaulting to strategy DEFAULT."
#         source $HDK_SHELL_DIR/build/scripts/strategy_DEFAULT.tcl
#     }
# }
TIMING strategy.
## source $HDK_SHELL_DIR/build/scripts/params.tcl
### if {$uram_option != 2} {
###   set_param synth.elaboration.rodinMoreOptions {rt::set_parameter disableOregPackingUram true}
###   set_param physynth.ultraRAMOptOutput false
### }
### set_param hd.supportClockNetCrossDiffReconfigurablePartitions 1 
### if {[string match *2020.2* [version -short]]} {set_param project.replaceDontTouchWithKeepHierarchySoft false}
## source $HDK_SHELL_DIR/build/scripts/uram_options.tcl
### switch $uram_option {
###     "2" {
###         set synth_uram_option "-max_uram_cascade_height 2"
###         set uramHeight 2
###     }
###     "3" {
###         set synth_uram_option "-max_uram_cascade_height 3"
###         set uramHeight 3
###     }
###     "4" {
###         set synth_uram_option "-max_uram_cascade_height 1"
###         set uramHeight 4
###     }
###     default {
###         set synth_uram_option "-max_uram_cascade_height 1"
###         set uramHeight 4
###     }
### }
## set synth_options "-no_lc -shreg_min_size 5 -fsm_extraction one_hot -resource_sharing off $synth_uram_option"
## set synth_directive "default"
## set psip 0
## set link 1
## set opt 1
## set opt_options    ""
## set opt_directive  "Explore"
## set opt_preHookTcl  "$HDK_SHELL_DIR/build/scripts/check_uram.tcl"
## set opt_postHookTcl "$HDK_SHELL_DIR/build/scripts/apply_debug_constraints.tcl"
## set place 1
## set place_options    ""
## set place_directive  "ExtraNetDelay_high"
## set place_preHookTcl ""
## set place_postHookTcl ""
## set phys_opt 1
## set phys_options     ""
## set phys_directive   ""
## set phys_directive   "AggressiveExplore"
## set phys_preHookTcl  ""
## set phys_postHookTcl ""
## set route 1
## set route_options    "-tns_cleanup"
## set route_directive  "Explore"
## set route_preHookTcl ""
## set route_postHookTcl ""
## set route_phys_opt 1
## set post_phys_options     ""
## set post_phys_directive   "AggressiveExplore"
## set post_phys_preHookTcl  ""
## set post_phys_postHookTcl ""
# source encrypt.tcl
## set HDK_SHELL_DIR $::env(HDK_SHELL_DIR)
## set HDK_SHELL_DESIGN_DIR $::env(HDK_SHELL_DESIGN_DIR)
## set CL_DIR $::env(CL_DIR)
## set TARGET_DIR $CL_DIR/build/src_post_encryption
## set UNUSED_TEMPLATES_DIR $HDK_SHELL_DESIGN_DIR/interfaces
## if {[llength [glob -nocomplain -dir $TARGET_DIR *]] != 0} {
##   eval file delete -force [glob $TARGET_DIR/*]
## }
## file copy -force $CL_DIR/design/cl_hello_world_defines.vh             $TARGET_DIR
## file copy -force $CL_DIR/design/cl_id_defines.vh                      $TARGET_DIR
## file copy -force $CL_DIR/design/wrapper_top.sv                      	$TARGET_DIR 
## file copy -force $CL_DIR/design/counter.sv                        	  $TARGET_DIR 
## file copy -force $CL_DIR/design/comparator.sv                    	    $TARGET_DIR
## file copy -force $CL_DIR/design/fifo_async.sv                    	    $TARGET_DIR
## file copy -force $CL_DIR/design/fifo_in_out.sv                    	  $TARGET_DIR
## file copy -force $CL_DIR/design/fsm_64to256.sv                    	  $TARGET_DIR
## file copy -force $CL_DIR/design/fsm_matrix2hash.sv                    $TARGET_DIR
## file copy -force $CL_DIR/design/heavy_hash_blk.sv                    	$TARGET_DIR
## file copy -force $CL_DIR/design/heavy_hash.sv                    	    $TARGET_DIR
## file copy -force $CL_DIR/design/matrix_controller.sv             	    $TARGET_DIR 
## file copy -force $CL_DIR/design/matrix_data_path.sv              	    $TARGET_DIR
## file copy -force $CL_DIR/design/matrix_ram.sv                    	    $TARGET_DIR
## file copy -force $CL_DIR/design/matrix_top.sv                    	    $TARGET_DIR
## file copy -force $CL_DIR/design/nonce_gen.sv                    	    $TARGET_DIR
## file copy -force $CL_DIR/design/PE.sv                           	    $TARGET_DIR
## file copy -force $CL_DIR/design/top.sv                          	    $TARGET_DIR
## file copy -force $CL_DIR/design/countern.vhd                          $TARGET_DIR
## file copy -force $CL_DIR/design/keccak_bytepad.vhd                    $TARGET_DIR
## file copy -force $CL_DIR/design/keccak_cons.vhd                       $TARGET_DIR
## file copy -force $CL_DIR/design/keccak_control.vhd                   	$TARGET_DIR 
## file copy -force $CL_DIR/design/keccak_datapath.vhd                	  $TARGET_DIR 
## file copy -force $CL_DIR/design/keccak_fsm1.vhd                 	    $TARGET_DIR
## file copy -force $CL_DIR/design/keccak_fsm2.vhd                  	    $TARGET_DIR
## file copy -force $CL_DIR/design/keccak_pkg.vhd                    	  $TARGET_DIR
## file copy -force $CL_DIR/design/keccak_round.vhd                   	  $TARGET_DIR
## file copy -force $CL_DIR/design/keccak_top.vhd                        $TARGET_DIR
## file copy -force $CL_DIR/design/piso.vhd                              $TARGET_DIR
## file copy -force $CL_DIR/design/regn.vhd                              $TARGET_DIR
## file copy -force $CL_DIR/design/sha3_fsm3.vhd                         $TARGET_DIR
## file copy -force $CL_DIR/design/sha3_pkg.vhd                          $TARGET_DIR
## file copy -force $CL_DIR/design/sipo.vhd                              $TARGET_DIR
## file copy -force $CL_DIR/design/sr_reg.vhd                            $TARGET_DIR
## file copy -force $CL_DIR/../common/design/cl_common_defines.vh        $TARGET_DIR
## file copy -force $UNUSED_TEMPLATES_DIR/unused_apppf_irq_template.inc  $TARGET_DIR
## file copy -force $UNUSED_TEMPLATES_DIR/unused_cl_sda_template.inc     $TARGET_DIR
## file copy -force $UNUSED_TEMPLATES_DIR/unused_ddr_a_b_d_template.inc  $TARGET_DIR
## file copy -force $UNUSED_TEMPLATES_DIR/unused_ddr_c_template.inc      $TARGET_DIR
## file copy -force $UNUSED_TEMPLATES_DIR/unused_dma_pcis_template.inc   $TARGET_DIR
## file copy -force $UNUSED_TEMPLATES_DIR/unused_pcim_template.inc       $TARGET_DIR
## file copy -force $UNUSED_TEMPLATES_DIR/unused_sh_bar1_template.inc    $TARGET_DIR
## file copy -force $UNUSED_TEMPLATES_DIR/unused_flr_template.inc        $TARGET_DIR
## exec chmod +w {*}[glob $TARGET_DIR/*]
## set TOOL_VERSION $::env(VIVADO_TOOL_VERSION)
## set vivado_version [string range [version -short] 0 5]
## puts "AWS FPGA: VIVADO_TOOL_VERSION $TOOL_VERSION"
AWS FPGA: VIVADO_TOOL_VERSION v2020.2
## puts "vivado_version $vivado_version"
vivado_version 2020.2
## encrypt -k $HDK_SHELL_DIR/build/scripts/vivado_keyfile_2017_4.txt -lang verilog  [glob -nocomplain -- $TARGET_DIR/*.{v,sv}] [glob -nocomplain -- $TARGET_DIR/*.vh] [glob -nocomplain -- $TARGET_DIR/*.inc]
ERROR: [Vivado 12-3330] encrypt 1735: Failed to encrypt ''./home/egoncu/.Xilinx/.temp73500b5c-2108-4b38-bc15-7ebca0f3ca60/vivado_keyfile_2017_4.txt: You are not licensed to encrypt IEEE1735 Version 2 [/home/egoncu/.Xilinx/.temp73500b5c-2108-4b38-bc15-7ebca0f3ca60/vivado_keyfile_2017_4.txt]

    while executing
"source encrypt.tcl"
    (file "create_dcp_from_cl.tcl" line 184)
INFO: [Common 17-206] Exiting Vivado at Mon Jul  5 12:09:11 2021...
